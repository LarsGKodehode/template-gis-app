# This workflow runs whenever a PR is opened or updated, or a commit is pushed to main. It runs
# several test suites:
# - unit-test: checks that the unit tests passes
#
# Inspired by https://github.com/jonhoo/rust-ci-conf

# This workflow need to read the repository, write to GitHub Container Registry
# and make use of actions defined elswhere
permissions:
  contents: read
  packages: write
  actions: read

# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches:
      - main
    paths:
      - applications/*
  # Allows manually triggering the workflow
  workflow_dispatch:

# If new code is pushed to a PR branch, then cancel in progress workflows for that PR. Ensures that
# we don't waste CI time, and returns results quicker https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

name: publish container image
jobs:
  publish:
    strategy:
      matrix:
        dir: [applications/map]
        targetArchitecture:
          [aarch64-linux, aarch64-darwin, x86_64-linux, x86_64-darwin]
    runs-on: ubuntu-24.04
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          dir: ${{ matrix.dir }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Container registries must be lowercase
      # https://github.com/orgs/community/discussions/25768
      - name: Lowercase github.repository
        run: |
          echo "REPO=${GITHUB_REPOSITORY@L}" >> ${GITHUB_ENV}

      - name: Build Docker Image with Nix
        run: |
          nix build .#container.${{ matrix.targetArchitecture }}
          docker load < result
          echo "IMAGE_ID=$(docker images -q | head -n 1)" >> ${GITHUB_ENV}
          echo "STORE_HASH=$(tar -xzOf result manifest.json | jq -r '[.[] | .RepoTags[]] | .[]' | sed 's/.*[:]//')" >> ${GITHUB_ENV}
        #                    ^^^                              ^^                                  ^^^               ^^
        # Getting the unique nix/store hash for the image is quickest done by
        # - extracting the manifest from the result(.tar.gz)
        # - parsing the json
        # - filtering the full name
        # - and finaly storing the result in the environment

      - name: Tag Docker Image (latest)
        run: |
          docker tag ${{ env.IMAGE_ID }} ghcr.io/${{ env.REPO }}/${{ matrix.dir }}:latest
      - name: Tag Docker Image (unique hash)
        run: |
          docker tag ${{ env.IMAGE_ID }} ghcr.io/${{ env.REPO }}/${{ matrix.dir }}:${{ env.STORE_HASH }}

      - name: Push Docker Image (latest)
        run: |
          docker push ghcr.io/${{ env.REPO }}/${{ matrix.dir }}:latest
      - name: Push Docker Image (unique hash)
        run: |
          docker push ghcr.io/${{ env.REPO }}/${{ matrix.dir }}:${{ env.STORE_HASH }}
